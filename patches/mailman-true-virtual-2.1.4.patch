--- ./bin/newlist.orig	Thu Apr 22 00:38:17 2004
+++ ./bin/newlist	Thu Apr 22 00:38:18 2004
@@ -133,7 +133,7 @@
     host_name = None
     web_page_url = None
     if '@' in listname:
-        listname, domain = listname.split('@', 1)
+        firstname, domain = listname.split('@', 1)
         host_name = mm_cfg.VIRTUAL_HOSTS.get(domain, domain)
         web_page_url = mm_cfg.DEFAULT_URL_PATTERN % domain
--- Mailman/Gui/General.py.orig	Wed Mar 16 15:46:55 2005
+++ Mailman/Gui/General.py	Wed Mar 16 15:47:21 2005
@@ -413,7 +413,7 @@
 
     def _setValue(self, mlist, property, val, doc):
         if property == 'real_name' and \
-               val.lower() <> mlist.internal_name().lower():
+               val.lower() <> mlist.real_name.lower():
             # These values can't differ by other than case
             doc.addError(_("""<b>real_name</b> attribute not
             changed!  It must differ from the list's name by case
--- Mailman/Handlers/CookHeaders.py.orig	Sun May 30 09:28:43 2004
+++ Mailman/Handlers/CookHeaders.py	Thu Jan 20 13:21:36 2005
@@ -164,7 +164,9 @@
     if msgdata.get('_nolist') or not mlist.include_rfc2369_headers:
         return
     # This will act like an email address for purposes of formataddr()
-    listid = '%s.%s' % (mlist.internal_name(), mlist.host_name)
+    #listid = '%s.%s' % (mlist.internal_name(), mlist.host_name)
+    # internal_name already contains the hostname with the vhost patch
+    listid = mlist.internal_name()
     if mlist.description:
         # Don't wrap the header since here we just want to get it properly RFC
         # 2047 encoded.
--- Mailman/MailList.py.orig	Sun May 30 09:28:43 2004
+++ Mailman/MailList.py	Thu Jan 20 13:24:02 2005
@@ -183,9 +183,14 @@
         return self._full_path
 
     def getListAddress(self, extra=None):
+        posting_addr = self.internal_name()
+        try:
+            posting_addr = self.real_name.lower()
+        except:
+            pass
         if extra is None:
-            return '%s@%s' % (self.internal_name(), self.host_name)
-        return '%s-%s@%s' % (self.internal_name(), extra, self.host_name)
+            return '%s@%s' % (posting_addr, self.host_name)
+        return '%s-%s@%s' % (posting_addr, extra, self.host_name)
 
     # For backwards compatibility
     def GetBouncesEmail(self):
@@ -434,28 +439,39 @@
     #
     def Create(self, name, admin, crypted_password,
                langs=None, emailhost=None):
-        if Utils.list_exists(name):
-            raise Errors.MMListAlreadyExistsError, name
         # Validate what will be the list's posting address.  If that's
         # invalid, we don't want to create the mailing list.  The hostname
         # part doesn't really matter, since that better already be valid.
         # However, most scripts already catch MMBadEmailError as exceptions on
         # the admin's email address, so transform the exception.
-        if emailhost is None:
-            emailhost = mm_cfg.DEFAULT_EMAIL_HOST
-        postingaddr = '%s@%s' % (name, emailhost)
+	if emailhost is None:
+ 	    emailhost = mm_cfg.DEFAULT_EMAIL_HOST
+	# default, for when no domain is given
+	firstname = name
+ 	# we set a special name for virtual hosted lists
+ 	if '@' in name:
+ 	    firstname, emailhost = name.split('@', 1)
+            name = "%s-%s" % (firstname, emailhost)
+ 	# but we keep a sensible posting address
+        postingaddr = '%s@%s' % (firstname, emailhost)
         try:
             Utils.ValidateEmail(postingaddr)
         except Errors.MMBadEmailError:
             raise Errors.BadListNameError, postingaddr
         # Validate the admin's email address
         Utils.ValidateEmail(admin)
+        if Utils.list_exists(name):
+            raise Errors.MMListAlreadyExistsError, name
         self._internal_name = name
         self._full_path = Site.get_listpath(name, create=1)
         # Don't use Lock() since that tries to load the non-existant config.pck
         self.__lock.lock()
         self.InitVars(name, admin, crypted_password)
         self.CheckValues()
+	# this is for getListAddress
+        self.list_address = postingaddr
+        self.real_name = firstname
+        self.subject_prefix = mm_cfg.DEFAULT_SUBJECT_PREFIX % self.__dict__
         if langs is None:
             self.available_languages = [self.preferred_language]
         else:
@@ -1243,7 +1260,7 @@
         to or cc addrs."""
         # BAW: fall back to Utils.ParseAddr if the first test fails.
         # this is the list's full address
-        listfullname = '%s@%s' % (self.internal_name(), self.host_name)
+        listfullname = self.getListAddress()
         recips = []
         # check all recipient addresses against the list's explicit addresses,
         # specifically To: Cc: and Resent-to:
@@ -1295,7 +1308,7 @@
             addr = addr.lower()
             localpart = addr.split('@')[0]
             if (# TBD: backwards compatibility: deprecated
-                    localpart == self.internal_name() or
+                    localpart == self.real_name.lower() or
                     # exact match against the complete list address
                     addr == listfullname):
                 return 1
